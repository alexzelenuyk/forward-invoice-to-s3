AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Stack intercepts emails, invoke lambda to extract invoices and store them in s3 with categorisation

Globals:
  Function:
    Timeout: 30

Parameters:
  StorageBucket:
    Type: String
    Description: Prefix for S3 bucket where all documents will be stored
  RecipientEmail:
    Type: String
    Description: Recepient email

Resources:
  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../.build
      Handler: lambda.handler
      Runtime: nodejs10.x
      Environment:
        Variables:
          TEMP_MAIL_BUCKET:
            !Select [0, !Split ['.', !GetAtt S3TempBucketForEmails.DomainName]]
          DESTINATION_BUCKET: !Ref StorageBucket
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 's3:GetObject'
                - 's3:PutObject'
              Resource:
                - !Join ['', [!GetAtt S3TempBucketForEmails.Arn, '/*']]
                - !Join ['', [!GetAtt S3StorageBucket.Arn, '/*']]
            - Effect: Allow
              Action: ses:SendBounce
              Resource: '*'
            - Effect: Allow
              Action: logs:*
              Resource: 'arn:aws:logs:*:*:*'
    DependsOn:
      - S3StorageBucket

  S3TempBucketForEmails:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: BucketOwnerFullControl
      LifecycleConfiguration:
        Rules:
          - Id: 'DeleteFile'
            ExpirationInDays: 1
            Status: Enabled

  S3StorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref StorageBucket

  S3TempBucketForEmailsPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        !Select [0, !Split ['.', !GetAtt S3TempBucketForEmails.DomainName]]
      PolicyDocument:
        Statement:
          - Sid: 'AllowSESPuts'
            Principal:
              Service: 'ses.amazonaws.com'
            Action: 's3:PutObject'
            Effect: 'Allow'
            Resource: !Join ['', [!GetAtt S3TempBucketForEmails.Arn, '/*']]
    DependsOn:
      - LambdaSesPermissions

  LambdaSesPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: ses.amazonaws.com
      FunctionName: !GetAtt LambdaFunction.Arn

  RuleSet:
    Type: AWS::SES::ReceiptRuleSet
    Properties:
      RuleSetName: Default

  SESRulesToStoreMail:
    Type: AWS::SES::ReceiptRule
    Properties:
      RuleSetName: !Ref RuleSet
      Rule:
        Enabled: True
        Recipients: [!Ref RecipientEmail]
        Actions:
          - S3Action:
              BucketName:
                !Select [
                  0,
                  !Split ['.', !GetAtt S3TempBucketForEmails.DomainName],
                ]
    DependsOn:
      - LambdaFunction
      - LambdaSesPermissions

  SESRulesToInvokeLambda:
    Type: AWS::SES::ReceiptRule
    Properties:
      RuleSetName: !Ref RuleSet
      Recipients: [!Ref RecipientEmail]
      After: !Ref SESRulesToStoreMail
      Rule:
        Enabled: True
        Actions:
          - LambdaAction:
              FunctionArn: !GetAtt LambdaFunction.Arn
    DependsOn:
      - S3TempBucketForEmails
      - LambdaSesPermissions

Outputs:
  LambdaFunction:
    Description: 'Lambda handler ARN'
    Value: !GetAtt LambdaFunction.Arn
  StorageBucket:
    Description: 'Storage bucket name'
    Value: !GetAtt S3StorageBucket.DomainName
  RulesetsName:
    Description: 'Name of rulesets'
    Value: 'Default'
Metadata:
  AWS::ServerlessRepo::Application:
    Name: forward-invoice-to-s3
    Description: Application that intercepts emails (using SES), find .pdf attachemnts and store them categorised in S3
    Author: Oleksii Zeleniuk
    SpdxLicenseId: MIT
    LicenseUrl: ../LICENSE
    ReadmeUrl: ../README.md
    Labels: ['SES', 'S3', 'Lambda']
    HomePageUrl: https://github.com/alexzelenuyk/forward-invoice-to-s3
    SemanticVersion: 0.0.1
    SourceCodeUrl: https://github.com/alexzelenuyk/forward-invoice-to-s3
